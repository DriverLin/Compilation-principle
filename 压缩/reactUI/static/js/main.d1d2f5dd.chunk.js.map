{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","useEffect","chartData","state","echarts","init","document","getElementById","setOption","title","text","tooltip","animationDurationUpdate","animationEasingUpdate","series","type","layout","symbolSize","roam","label","show","formatter","params","data","value","edgeSymbol","edgeSymbolSize","edgeLabel","fontSize","links","lineStyle","opacity","width","curveness","id","style","height","useStyles","makeStyles","theme","inputContainer","display","flexWrap","inputTextArea","spacing","itemS","margin","inputCard","marginTop","minWidth","resultCard","chartContainer","App","classes","useState","setChartData","React","treeZoom","setTreeZoom","count","handleResponse","root","h","getHeight","node","undefined","op","left","right","nodes","edges","setData","parent","push","name","toString","x","y","source","index","target","getPos","console","log","setErrorZoom","handleClickOpen","inputExp","setInputExp","inputInfo","errorZoom","Grid","container","direction","justify","alignItems","Card","className","CardContent","Paper","elevation","TextField","color","onChange","event","variant","Button","size","onClick","fetch","method","credentials","headers","body","mode","cache","then","response","json","catch","err","Zoom","in","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","onEnter","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d1d2f5dd.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport echarts from 'echarts/lib/echarts';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/title';\n\nexport default function Chart(props) {\n  function initial() {\n    if (props.chartData.state === 0) {\n      return\n    }\n    var myChart = echarts.init(document.getElementById('treeChart'));\n    myChart.setOption({\n      title: {\n        text: props.chartData.title\n      },\n      tooltip: {},\n      animationDurationUpdate: 1500,\n      animationEasingUpdate: 'quinticInOut',\n      series: [\n        {\n          type: 'graph',\n          layout: 'none',\n          symbolSize: 50,\n          roam: true,\n          label: {\n            show: true,\n            formatter: params => params.data.value\n          },\n          edgeSymbol: ['circle', 'arrow'],\n          edgeSymbolSize: [4, 10],\n          edgeLabel: {\n            fontSize: 20\n          },\n          data: props.chartData.data,\n          // links: [],\n          links: props.chartData.links,\n          lineStyle: {\n            opacity: 0.9,\n            width: 2,\n            curveness: 0\n          }\n        }\n      ]\n    });\n  }\n  useEffect(() => {\n    initial()\n  }, [props])\n  return (\n    <div>\n      <div id=\"treeChart\" style={{ width: 1080, height: props.chartData.height }}></div>\n    </div>\n  );\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ReactDOM from 'react-dom';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Chart from './Chart.js';\nimport Zoom from '@material-ui/core/Zoom';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nconst useStyles = makeStyles((theme) => ({\n  inputContainer: {\n    // marginTop: theme.spacing(16),\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  inputTextArea: {\n    width: theme.spacing(64),\n  },\n  itemS: {\n    '& > *': {\n      margin: theme.spacing(1),\n      height: theme.spacing(7),\n    },\n  },\n  inputCard: {\n    marginTop: theme.spacing(8),\n    minWidth: 275,\n    // backgroundColor: \"#000000\"\n  },\n  resultCard: {\n    marginTop: theme.spacing(8),\n    minWidth: 1080,\n    // backgroundColor: \"#000000\"\n  },\n  chartContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  }\n\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  const [chartData, setChartData] = useState(\n    {\n      state: 0\n    }\n  )\n  const [treeZoom, setTreeZoom] = React.useState(false);\n  var count = 0;\n  const handleResponse = (text, root) => {\n    if (root[text] === \"ExpressionError\") {\n      handleClickOpen()\n      return\n    }\n    root = root[text]\n    count = 0;\n    var h = getHeight(root)\n    var width = 2 ** h\n    var treePos = getPos(root, width * 100 * 2, 100, width * 100, (width + 1) * 100 / h)\n    var nodes = []\n    var edges = []\n    setData(null, treePos, nodes, edges)\n    console.log({\n      state: 1,\n      data: nodes,\n      links: edges,\n      height: ((width + 1) * 100) * 1080 / (width * 100 * 2) + 100,\n      title: text\n    })\n    setChartData(\n      {\n        state: 1,\n        data: nodes,\n        links: edges,\n        height: ((width + 1) * 100) * 1080 / (width * 100 * 2) + 100,\n        title: text\n      }\n    )\n\n    // 理论H / 理论W = RH / 1080\n\n\n    setErrorZoom(false)\n    setTreeZoom(true)\n\n  }\n\n  function setData(parent, node, nodes, edges) {\n    nodes.push(\n      {\n        name: count++,\n        value: node.op.toString(),\n        x: node.x,\n        y: node.y\n      }\n    )\n    if (parent != null) {\n      edges.push(\n        {\n          source: parent.index,\n          target: node.index,\n        }\n      )\n    }\n\n    if (node.left === undefined) {\n      return\n    }\n    setData(node, node.left, nodes, edges)\n    setData(node, node.right, nodes, edges)\n  }\n\n  function getPos(node, x, y, margin, height) {\n    var index = count\n    count++\n    if (node.op === undefined) {\n      return {\n        op: node.toString(),\n        x: x,\n        y: y,\n        index: index\n      }\n    }\n    var op = node.op.toString()\n    var left = getPos(node.left, x - margin / 2, y + height, margin / 2, height)\n    var right = getPos(node.right, x + margin / 2, y + height, margin / 2, height)\n    return {\n      op: op,\n      x: x,\n      y: y,\n      index: index,\n      left: left,\n      right: right\n    }\n  }\n\n\n  function getHeight(node) {\n    if (node.op === undefined) {\n      return 1;\n    }\n    else {\n      var left = getHeight(node.left);\n      var right = getHeight(node.right);\n      return left > right ? left + 1 : right + 1\n    }\n  }\n\n  const [inputExp, setInputExp] = useState(\"\");\n  const handleChange = (event) => {\n    setInputExp(event.target.value);\n  };\n\n  const [inputInfo, setinputInfo] = useState(\"算数表达式\")\n\n  const [errorZoom, setErrorZoom] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setErrorZoom(true);\n  };\n\n  const handleClose = () => {\n    setErrorZoom(false);\n  };\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"center\"\n      alignItems=\"center\"\n\n    >\n      <Card className={classes.inputCard}>\n        <CardContent>\n          <div >\n            <Paper elevation={0} className={classes.inputContainer} >\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <div className={classes.itemS}>\n                  <TextField\n                    className={classes.inputTextArea}\n                    // id=\"mathInput\"\n                    label={inputInfo}\n                    color=\"secondary\"\n                    id=\"outlined-name\"\n                    // label=\"Name\"\n                    // helperText=\"Error\"\n                    value={inputExp}\n                    onChange={handleChange}\n                    variant=\"outlined\"\n                  />\n                  <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={() => {\n                    // setTreeZoom(false)\n                    fetch('./postApi', {\n                      method: 'POST',\n                      credentials: \"include\",\n                      headers: {\n                        'Content-Type': 'application/json;charset=UTF-8'\n                      },\n                      body: inputExp,\n                      mode: 'cors',\n                      cache: 'no-store'\n                    }).then(response => response.json())\n                      .then(data => handleResponse(inputExp, data))\n                      .catch(err => {\n                        handleClickOpen()\n                        console.log(err)\n                      })\n                  }}>\n                    分析\n                  </Button>\n                  <Button variant=\"contained\" color=\"secondary\" size=\"large\" onClick={() => {\n                    setInputExp(\"\")\n                    setTreeZoom(false)\n                    setChartData({\n                      state: 0\n                    })\n                  }}>\n                    清空\n                  </Button>\n                </div>\n              </Grid>\n            </Paper>\n          </div>\n        </CardContent>\n      </Card>\n      <Zoom in={treeZoom}>\n        <Card className={classes.resultCard}>\n          <CardContent>\n            <Paper elevation={0} className={classes.chartContainer} >\n              <Chart chartData={chartData} />\n            </Paper>\n          </CardContent>\n        </Card>\n      </Zoom>\n      <Dialog\n        open={errorZoom}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Error\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            请检查输入是否有误\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode >\n    <App onEnter={() => { document.title = '标题' }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}